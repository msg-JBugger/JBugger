Index: src/main/java/com/example/demo/config/WebSocketConfig.java
===================================================================
diff --git a/src/main/java/com/example/demo/config/WebSocketConfig.java b/src/main/java/com/example/demo/config/WebSocketConfig.java
--- a/src/main/java/com/example/demo/config/WebSocketConfig.java	
+++ b/src/main/java/com/example/demo/config/WebSocketConfig.java	
@@ -1,48 +1,48 @@
-package com.example.demo.config;
-
-
-import lombok.NonNull;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.messaging.Message;
-import org.springframework.messaging.MessageChannel;
-import org.springframework.messaging.simp.config.ChannelRegistration;
-import org.springframework.messaging.simp.config.MessageBrokerRegistry;
-import org.springframework.messaging.simp.stomp.StompCommand;
-import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
-import org.springframework.messaging.support.ChannelInterceptor;
-import org.springframework.messaging.support.MessageHeaderAccessor;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
-import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
-import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
-
-@Configuration
-@EnableWebSocketMessageBroker
-public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
-
-    @Override
-    public void configureMessageBroker(MessageBrokerRegistry config) {
-        config.enableSimpleBroker("/user");
-        config.setApplicationDestinationPrefixes("/notifications");
-    }
-
-    @Override
-    public void registerStompEndpoints(StompEndpointRegistry registry) {
-        registry.addEndpoint("/jbugger-notifications");
-    }
-    @Override
-    public void configureClientInboundChannel(ChannelRegistration registration) {
-        registration.interceptors(new ChannelInterceptor() {
-            @Override
-            public Message<?> preSend(@NonNull Message<?> message, @NonNull MessageChannel channel) {
-                StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);
-                if (accessor != null && StompCommand.CONNECT.equals(accessor.getCommand())) {
-                    Authentication user = SecurityContextHolder.getContext().getAuthentication();
-                    accessor.setUser(user);
-                }
-                return message;
-            }
-        });
-    }
-}
+//package com.example.demo.config;
+//
+//
+//import lombok.NonNull;
+//import org.springframework.context.annotation.Configuration;
+//import org.springframework.messaging.Message;
+//import org.springframework.messaging.MessageChannel;
+//import org.springframework.messaging.simp.config.ChannelRegistration;
+//import org.springframework.messaging.simp.config.MessageBrokerRegistry;
+//import org.springframework.messaging.simp.stomp.StompCommand;
+//import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
+//import org.springframework.messaging.support.ChannelInterceptor;
+//import org.springframework.messaging.support.MessageHeaderAccessor;
+//import org.springframework.security.core.Authentication;
+//import org.springframework.security.core.context.SecurityContextHolder;
+//import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
+//import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
+//import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
+//
+//@Configuration
+//@EnableWebSocketMessageBroker
+//public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
+//
+//    @Override
+//    public void configureMessageBroker(MessageBrokerRegistry config) {
+//        config.enableSimpleBroker("/user");
+//        config.setApplicationDestinationPrefixes("/notifications");
+//    }
+//
+//    @Override
+//    public void registerStompEndpoints(StompEndpointRegistry registry) {
+//        registry.addEndpoint("/jbugger-notifications");
+//    }
+//    @Override
+//    public void configureClientInboundChannel(ChannelRegistration registration) {
+//        registration.interceptors(new ChannelInterceptor() {
+//            @Override
+//            public Message<?> preSend(@NonNull Message<?> message, @NonNull MessageChannel channel) {
+//                StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);
+//                if (accessor != null && StompCommand.CONNECT.equals(accessor.getCommand())) {
+//                    Authentication user = SecurityContextHolder.getContext().getAuthentication();
+//                    accessor.setUser(user);
+//                }
+//                return message;
+//            }
+//        });
+//    }
+//}
Index: src/main/java/com/example/demo/controller/NotificationController.java
===================================================================
diff --git a/src/main/java/com/example/demo/controller/NotificationController.java b/src/main/java/com/example/demo/controller/NotificationController.java
--- a/src/main/java/com/example/demo/controller/NotificationController.java	
+++ b/src/main/java/com/example/demo/controller/NotificationController.java	
@@ -1,26 +1,26 @@
-package com.example.demo.controller;
-
-import com.example.demo.entity.Notification;
-import com.example.demo.entity.User;
-import lombok.RequiredArgsConstructor;
-import org.aspectj.weaver.ast.Not;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.event.EventListener;
-import org.springframework.messaging.handler.annotation.MessageMapping;
-import org.springframework.messaging.handler.annotation.SendTo;
-import org.springframework.messaging.simp.SimpMessagingTemplate;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-@RestController
-@RequiredArgsConstructor
-public class NotificationController {
-    @Autowired
-    private SimpMessagingTemplate messagingTemplate;
-
-    public void sendNotificationToUser(Notification notification) {
-        for(User user : notification.getUsers()) {
-            messagingTemplate.convertAndSendToUser(user.getUsername(), "/notifications", notification);
-        }
-    }
-}
+//package com.example.demo.controller;
+//
+//import com.example.demo.entity.Notification;
+//import com.example.demo.entity.User;
+//import lombok.RequiredArgsConstructor;
+//import org.aspectj.weaver.ast.Not;
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.context.event.EventListener;
+//import org.springframework.messaging.handler.annotation.MessageMapping;
+//import org.springframework.messaging.handler.annotation.SendTo;
+//import org.springframework.messaging.simp.SimpMessagingTemplate;
+//import org.springframework.web.bind.annotation.RequestMapping;
+//import org.springframework.web.bind.annotation.RestController;
+//
+//@RestController
+//@RequiredArgsConstructor
+//public class NotificationController {
+//    @Autowired
+//    private SimpMessagingTemplate messagingTemplate;
+//
+//    public void sendNotificationToUser(Notification notification) {
+//        for(User user : notification.getUsers()) {
+//            messagingTemplate.convertAndSendToUser(user.getUsername(), "/notifications", notification);
+//        }
+//    }
+//}
